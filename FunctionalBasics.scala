import scala.collection.mutable.ListBuffer

case class Employee(id: Long,
                    first: String,
                    last: String,
                    city: String,
                    active: Boolean)

object FunctionalBasics extends App {
  val employees = List(
    Employee(1, "John", "Doe", "State College", true),
    Employee(2, "Sue", "Smith", "Harrisburg", false),
    Employee(3, "Aaron", "Jones", "State College", true),
    Employee(4, "Pat", "Jackson", "Erie", false),
    Employee(5, "Ellen", "Jackson", "Erie", true)
  )

  def getCity(employee: Employee) = employee.city

  // get the cities from the List
  val cities = employees map getCity

  // use a lambda expression instead of a pre-defined function
  val activeEmployees = employees filter { e => e.active }

  // set employee 3 to inactive
  // normally, you'd use a map for this,
  // and this is not the most effecient way to do this.
  // the copy method is generated by the compiler b/c Employee is a case class.
  val empl2 = employees map { e =>
    if (e.id == 3) e.copy(active = false) else e
  }

  // template strings start w/ "s" and variables get substitued with $
  val fullNames = employees map { e => s"${e.first} ${e.last}" }


  // reduce is a function that takes two arguments and reduces them to a single one.
  // here, we find the largest word in the system dictionary
  import java.io.File
  import scala.io.Source

  val source = Source.fromFile(new File("/usr/share/dict/words"))
  val line = source.getLines().reduce { (a, b) => if (a.length > b.length) a else b }
  source.close()
  println(s"the longest word is $line")
}
